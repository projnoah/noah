{"version":3,"sources":["classie.js","fullscreenForm.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"install.js","sourcesContent":["/*!\n * classie - class helper functions\n * from bonzo https://github.com/ded/bonzo\n * \n * classie.has( elem, 'my-class' ) -> true/false\n * classie.add( elem, 'my-new-class' )\n * classie.remove( elem, 'my-unwanted-class' )\n * classie.toggle( elem, 'my-class' )\n */\n\n/*jshint browser: true, strict: true, undef: true */\n/*global define: false */\n\n( function( window ) {\n\n'use strict';\n\n// class helper functions from bonzo https://github.com/ded/bonzo\n\nfunction classReg( className ) {\n  return new RegExp(\"(^|\\\\s+)\" + className + \"(\\\\s+|$)\");\n}\n\n// classList support for class management\n// altho to be fair, the api sucks because it won't accept multiple classes at once\nvar hasClass, addClass, removeClass;\n\nif ( 'classList' in document.documentElement ) {\n  hasClass = function( elem, c ) {\n    return elem.classList.contains( c );\n  };\n  addClass = function( elem, c ) {\n    elem.classList.add( c );\n  };\n  removeClass = function( elem, c ) {\n    elem.classList.remove( c );\n  };\n}\nelse {\n  hasClass = function( elem, c ) {\n    return classReg( c ).test( elem.className );\n  };\n  addClass = function( elem, c ) {\n    if ( !hasClass( elem, c ) ) {\n      elem.className = elem.className + ' ' + c;\n    }\n  };\n  removeClass = function( elem, c ) {\n    elem.className = elem.className.replace( classReg( c ), ' ' );\n  };\n}\n\nfunction toggleClass( elem, c ) {\n  var fn = hasClass( elem, c ) ? removeClass : addClass;\n  fn( elem, c );\n}\n\nvar classie = {\n  // full names\n  hasClass: hasClass,\n  addClass: addClass,\n  removeClass: removeClass,\n  toggleClass: toggleClass,\n  // short names\n  has: hasClass,\n  add: addClass,\n  remove: removeClass,\n  toggle: toggleClass\n};\n\n// transport\nif ( typeof define === 'function' && define.amd ) {\n  // AMD\n  define( classie );\n} else {\n  // browser global\n  window.classie = classie;\n}\n\n})( window );\n",";( function( window ) {\n\n\t'use strict';\n\n\tvar support = { animations : Modernizr.cssanimations },\n\t\tanimEndEventNames = { 'WebkitAnimation' : 'webkitAnimationEnd', 'OAnimation' : 'oAnimationEnd', 'msAnimation' : 'MSAnimationEnd', 'animation' : 'animationend' },\n\t\t// animation end event name\n\t\tanimEndEventName = animEndEventNames[ Modernizr.prefixed( 'animation' ) ];\n\n\t/**\n\t * extend obj function\n\t */\n\tfunction extend( a, b ) {\n\t\tfor( var key in b ) {\n\t\t\tif( b.hasOwnProperty( key ) ) {\n\t\t\t\ta[key] = b[key];\n\t\t\t}\n\t\t}\n\t\treturn a;\n\t}\n\n\t/**\n\t * createElement function\n\t * creates an element with tag = tag, className = opt.cName, innerHTML = opt.inner and appends it to opt.appendTo\n\t */\n\tfunction createElement( tag, opt ) {\n\t\tvar el = document.createElement( tag )\n\t\tif( opt ) {\n\t\t\tif( opt.cName ) {\n\t\t\t\tel.className = opt.cName;\n\t\t\t}\n\t\t\tif( opt.inner ) {\n\t\t\t\tel.innerHTML = opt.inner;\n\t\t\t}\n\t\t\tif( opt.appendTo ) {\n\t\t\t\topt.appendTo.appendChild( el );\n\t\t\t}\n\t\t}\n\t\treturn el;\n\t}\n\n\t/**\n\t * FForm function\n\t */\n\tfunction FForm( el, options ) {\n\t\tthis.el = el;\n\t\tthis.options = extend( {}, this.options );\n  \t\textend( this.options, options );\n  \t\tthis._init();\n\t}\n\n\t/**\n\t * FForm options\n\t */\n\tFForm.prototype.options = {\n\t\t// show progress bar\n\t\tctrlProgress : true,\n\t\t// show navigation dots\n\t\tctrlNavDots : true,\n\t\t// show [current field]/[total fields] status\n\t\tctrlNavPosition : true,\n\t\t// reached the review and submit step\n\t\tonReview : function() { return false; }\n\t};\n\n\t/**\n\t * init function\n\t * initialize and cache some vars\n\t */\n\tFForm.prototype._init = function() {\n\t\t// the form element\n\t\tthis.formEl = this.el.querySelector( 'form' );\n\n\t\t// list of fields\n\t\tthis.fieldsList = this.formEl.querySelector( 'ol.fs-fields' );\n\n\t\t// current field position\n\t\tthis.current = 0;\n\n\t\t// all fields\n\t\tthis.fields = [].slice.call( this.fieldsList.children );\n\n\t\t// total fields\n\t\tthis.fieldsCount = this.fields.length;\n\n\t\t// show first field\n\t\tclassie.add( this.fields[ this.current ], 'fs-current' );\n\n\t\t// create/add controls\n\t\tthis._addControls();\n\n\t\t// create/add messages\n\t\tthis._addErrorMsg();\n\n\t\t// init events\n\t\tthis._initEvents();\n\t};\n\n\t/**\n\t * addControls function\n\t * create and insert the structure for the controls\n\t */\n\tFForm.prototype._addControls = function() {\n\t\t// main controls wrapper\n\t\tthis.ctrls = createElement( 'div', { cName : 'fs-controls', appendTo : this.el } );\n\n\t\t// continue button (jump to next field)\n\t\tthis.ctrlContinue = createElement( 'button', { cName : 'fs-continue', inner : next_button, appendTo : this.ctrls } );\n\t\tthis._showCtrl( this.ctrlContinue );\n\n\t\t// navigation dots\n\t\tif( this.options.ctrlNavDots ) {\n\t\t\tthis.ctrlNav = createElement( 'nav', { cName : 'fs-nav-dots', appendTo : this.ctrls } );\n\t\t\tvar dots = '';\n\t\t\tfor( var i = 0; i < this.fieldsCount; ++i ) {\n\t\t\t\tdots += i === this.current ? '<button class=\"fs-dot-current\"></button>' : '<button disabled></button>';\n\t\t\t}\n\t\t\tthis.ctrlNav.innerHTML = dots;\n\t\t\tthis._showCtrl( this.ctrlNav );\n\t\t\tthis.ctrlNavDots = [].slice.call( this.ctrlNav.children );\n\t\t}\n\n\t\t// field number status\n\t\tif( this.options.ctrlNavPosition ) {\n\t\t\tthis.ctrlFldStatus = createElement( 'span', { cName : 'fs-numbers', appendTo : this.ctrls } );\n\n\t\t\t// current field placeholder\n\t\t\tthis.ctrlFldStatusCurr = createElement( 'span', { cName : 'fs-number-current', inner : Number( this.current + 1 ) } );\n\t\t\tthis.ctrlFldStatus.appendChild( this.ctrlFldStatusCurr );\n\n\t\t\t// total fields placeholder\n\t\t\tthis.ctrlFldStatusTotal = createElement( 'span', { cName : 'fs-number-total', inner : this.fieldsCount } );\n\t\t\tthis.ctrlFldStatus.appendChild( this.ctrlFldStatusTotal );\n\t\t\tthis._showCtrl( this.ctrlFldStatus );\n\t\t}\n\n\t\t// progress bar\n\t\tif( this.options.ctrlProgress ) {\n\t\t\tthis.ctrlProgress = createElement( 'div', { cName : 'fs-progress', appendTo : this.ctrls } );\n\t\t\tthis._showCtrl( this.ctrlProgress );\n\t\t}\n\t}\n\n\t/**\n\t * addErrorMsg function\n\t * create and insert the structure for the error message\n\t */\n\tFForm.prototype._addErrorMsg = function() {\n\t\t// error message\n\t\tthis.msgError = createElement( 'span', { cName : 'fs-message-error', appendTo : this.el } );\n\t}\n\n\t/**\n\t * init events\n\t */\n\tFForm.prototype._initEvents = function() {\n\t\tvar self = this;\n\n\t\t// show next field\n\t\tthis.ctrlContinue.addEventListener( 'click', function() {\n\t\t\tself._nextField();\n\t\t} );\n\n\t\t// navigation dots\n\t\tif( this.options.ctrlNavDots ) {\n\t\t\tthis.ctrlNavDots.forEach( function( dot, pos ) {\n\t\t\t\tdot.addEventListener( 'click', function() {\n\t\t\t\t\tself._showField( pos );\n\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\n\t\t// jump to next field without clicking the continue button (for fields/list items with the attribute \"data-input-trigger\")\n\t\tthis.fields.forEach( function( fld ) {\n\t\t\tif( fld.hasAttribute( 'data-input-trigger' ) ) {\n\t\t\t\tvar input = fld.querySelector( 'input[type=\"radio\"]' ) || /*fld.querySelector( '.cs-select' ) ||*/ fld.querySelector( 'select' ); // assuming only radio and select elements (TODO: exclude multiple selects)\n\t\t\t\tif( !input ) return;\n\n\t\t\t\tswitch( input.tagName.toLowerCase() ) {\n\t\t\t\t\tcase 'select' :\n\t\t\t\t\t\tinput.addEventListener( 'change', function() { self._nextField(); } );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'input' :\n\t\t\t\t\t\t[].slice.call( fld.querySelectorAll( 'input[type=\"radio\"]' ) ).forEach( function( inp ) {\n\t\t\t\t\t\t\tinp.addEventListener( 'change', function(ev) { self._nextField(); } );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t/*\n\t\t\t\t\t// for our custom select we would do something like:\n\t\t\t\t\tcase 'div' :\n\t\t\t\t\t\t[].slice.call( fld.querySelectorAll( 'ul > li' ) ).forEach( function( inp ) {\n\t\t\t\t\t\t\tinp.addEventListener( 'click', function(ev) { self._nextField(); } );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t*/\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\n\t\t// keyboard navigation events - jump to next field when pressing enter\n\t\tdocument.addEventListener( 'keydown', function( ev ) {\n\t\t\tif( !self.isLastStep && ev.target.tagName.toLowerCase() !== 'textarea' ) {\n\t\t\t\tvar keyCode = ev.keyCode || ev.which;\n\t\t\t\tif( keyCode === 13 ) {\n\t\t\t\t\tev.preventDefault();\n\t\t\t\t\tself._nextField();\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t};\n\n\t/**\n\t * nextField function\n\t * jumps to the next field\n\t */\n\tFForm.prototype._nextField = function( backto ) {\n\t\tif( this.isLastStep || !this._validate() || this.isAnimating ) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.isAnimating = true;\n\n\t\t// check if on last step\n\t\tthis.isLastStep = this.current === this.fieldsCount - 1 && backto === undefined ? true : false;\n\n\t\t// clear any previous error messages\n\t\tthis._clearError();\n\n\t\t// current field\n\t\tvar currentFld = this.fields[ this.current ];\n\n\t\t// save the navigation direction\n\t\tthis.navdir = backto !== undefined ? backto < this.current ? 'prev' : 'next' : 'next';\n\n\t\t// update current field\n\t\tthis.current = backto !== undefined ? backto : this.current + 1;\n\n\t\tif( backto === undefined ) {\n\t\t\t// update progress bar (unless we navigate backwards)\n\t\t\tthis._progress();\n\n\t\t\t// save farthest position so far\n\t\t\tthis.farthest = this.current;\n\t\t}\n\n\t\t// add class \"fs-display-next\" or \"fs-display-prev\" to the list of fields\n\t\tclassie.add( this.fieldsList, 'fs-display-' + this.navdir );\n\n\t\t// remove class \"fs-current\" from current field and add it to the next one\n\t\t// also add class \"fs-show\" to the next field and the class \"fs-hide\" to the current one\n\t\tclassie.remove( currentFld, 'fs-current' );\n\t\tclassie.add( currentFld, 'fs-hide' );\n\n\t\tif( !this.isLastStep ) {\n\t\t\t// update nav\n\t\t\tthis._updateNav();\n\n\t\t\t// change the current field number/status\n\t\t\tthis._updateFieldNumber();\n\n\t\t\tvar nextField = this.fields[ this.current ];\n\t\t\tclassie.add( nextField, 'fs-current' );\n\t\t\tclassie.add( nextField, 'fs-show' );\n\t\t}\n\n\t\t// after animation ends remove added classes from fields\n\t\tvar self = this,\n\t\t\tonEndAnimationFn = function( ev ) {\n\t\t\t\tif( support.animations ) {\n\t\t\t\t\tthis.removeEventListener( animEndEventName, onEndAnimationFn );\n\t\t\t\t}\n\n\t\t\t\tclassie.remove( self.fieldsList, 'fs-display-' + self.navdir );\n\t\t\t\tclassie.remove( currentFld, 'fs-hide' );\n\n\t\t\t\tif( self.isLastStep ) {\n\t\t\t\t\t// show the complete form and hide the controls\n\t\t\t\t\tself._hideCtrl( self.ctrlNav );\n\t\t\t\t\tself._hideCtrl( self.ctrlProgress );\n\t\t\t\t\tself._hideCtrl( self.ctrlContinue );\n\t\t\t\t\tself._hideCtrl( self.ctrlFldStatus );\n\t\t\t\t\t// replace class fs-form-full with fs-form-overview\n\t\t\t\t\tclassie.remove( self.formEl, 'fs-form-full' );\n\t\t\t\t\tclassie.add( self.formEl, 'fs-form-overview' );\n\t\t\t\t\tclassie.add( self.formEl, 'fs-show' );\n\t\t\t\t\t// callback\n\t\t\t\t\tself.options.onReview();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tclassie.remove( nextField, 'fs-show' );\n\n\t\t\t\t\tnextField.querySelector(\"input\").focus();\n\t\t\t\t\t\n\t\t\t\t\tif( self.options.ctrlNavPosition ) {\n\t\t\t\t\t\tself.ctrlFldStatusCurr.innerHTML = self.ctrlFldStatusNew.innerHTML;\n\t\t\t\t\t\tself.ctrlFldStatus.removeChild( self.ctrlFldStatusNew );\n\t\t\t\t\t\tclassie.remove( self.ctrlFldStatus, 'fs-show-' + self.navdir );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tself.isAnimating = false;\n\t\t\t};\n\n\t\tif( support.animations ) {\n\t\t\tif( this.navdir === 'next' ) {\n\t\t\t\tif( this.isLastStep ) {\n\t\t\t\t\tcurrentFld.querySelector( '.fs-anim-upper' ).addEventListener( animEndEventName, onEndAnimationFn );\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tnextField.querySelector( '.fs-anim-lower' ).addEventListener( animEndEventName, onEndAnimationFn );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnextField.querySelector( '.fs-anim-upper' ).addEventListener( animEndEventName, onEndAnimationFn );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tonEndAnimationFn();\n\t\t}\n\t}\n\n\t/**\n\t * showField function\n\t * jumps to the field at position pos\n\t */\n\tFForm.prototype._showField = function( pos ) {\n\t\tif( pos === this.current || pos < 0 || pos > this.fieldsCount - 1 ) {\n\t\t\treturn false;\n\t\t}\n\t\tthis._nextField( pos );\n\t}\n\n\t/**\n\t * updateFieldNumber function\n\t * changes the current field number\n\t */\n\tFForm.prototype._updateFieldNumber = function() {\n\t\tif( this.options.ctrlNavPosition ) {\n\t\t\t// first, create next field number placeholder\n\t\t\tthis.ctrlFldStatusNew = document.createElement( 'span' );\n\t\t\tthis.ctrlFldStatusNew.className = 'fs-number-new';\n\t\t\tthis.ctrlFldStatusNew.innerHTML = Number( this.current + 1 );\n\n\t\t\t// insert it in the DOM\n\t\t\tthis.ctrlFldStatus.appendChild( this.ctrlFldStatusNew );\n\n\t\t\t// add class \"fs-show-next\" or \"fs-show-prev\" depending on the navigation direction\n\t\t\tvar self = this;\n\t\t\tsetTimeout( function() {\n\t\t\t\tclassie.add( self.ctrlFldStatus, self.navdir === 'next' ? 'fs-show-next' : 'fs-show-prev' );\n\t\t\t}, 25 );\n\t\t}\n\t}\n\n\t/**\n\t * progress function\n\t * updates the progress bar by setting its width\n\t */\n\tFForm.prototype._progress = function() {\n\t\tif( this.options.ctrlProgress ) {\n\t\t\tthis.ctrlProgress.style.width = this.current * ( 100 / this.fieldsCount ) + '%';\n\t\t}\n\t}\n\n\t/**\n\t * updateNav function\n\t * updates the navigation dots\n\t */\n\tFForm.prototype._updateNav = function() {\n\t\tif( this.options.ctrlNavDots ) {\n\t\t\tclassie.remove( this.ctrlNav.querySelector( 'button.fs-dot-current' ), 'fs-dot-current' );\n\t\t\tclassie.add( this.ctrlNavDots[ this.current ], 'fs-dot-current' );\n\t\t\tthis.ctrlNavDots[ this.current ].disabled = false;\n\t\t}\n\t}\n\n\t/**\n\t * showCtrl function\n\t * shows a control\n\t */\n\tFForm.prototype._showCtrl = function( ctrl ) {\n\t\tclassie.add( ctrl, 'fs-show' );\n\t}\n\n\t/**\n\t * hideCtrl function\n\t * hides a control\n\t */\n\tFForm.prototype._hideCtrl = function( ctrl ) {\n\t\tclassie.remove( ctrl, 'fs-show' );\n\t}\n\n\tFForm.prototype._validate = function() {\n\t\tvar fld = this.fields[ this.current ],\n\t\t\tinput = fld.querySelector( 'input[required]' ) || fld.querySelector( 'textarea[required]' ) || fld.querySelector( 'select[required]' ),\n\t\t\terror;\n\n\t\tif( !input ) return true;\n\n\t\tswitch( input.tagName.toLowerCase() ) {\n\t\t\tcase 'input' :\n\t\t\t\tif( input.type === 'radio' || input.type === 'checkbox' ) {\n\t\t\t\t\tvar checked = 0;\n\t\t\t\t\t[].slice.call( fld.querySelectorAll( 'input[type=\"' + input.type + '\"]' ) ).forEach( function( inp ) {\n\t\t\t\t\t\tif( inp.checked ) {\n\t\t\t\t\t\t\t++checked;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t\tif( !checked ) {\n\t\t\t\t\t\terror = 'EMPTY';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if( input.value === '' ) {\n\t\t\t\t\terror = 'EMPTY';\n\t\t\t\t} else if (input.type == \"email\") {\n\t\t\t\t\tvar reg = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n\t\t\t\t\tif (!reg.test(input.value)) {\n\t\t\t\t\t\terror = 'INVALID_EMAIL';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'select' :\n\t\t\t\t// assuming here '' or '-1' only\n\t\t\t\tif( input.value === '' || input.value === '-1' ) {\n\t\t\t\t\terror = 'EMPTY';\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'textarea' :\n\t\t\t\tif( input.value === '' ) {\n\t\t\t\t\terror = 'EMPTY';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif( error != undefined ) {\n\t\t\tthis._showError( error );\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// clears/hides the current error message\n\tFForm.prototype._clearError = function() {\n\t\tthis._hideCtrl( this.msgError );\n\t}\n\n\t// add to global namespace\n\twindow.FForm = FForm;\n\n})( window );"],"sourceRoot":"/source/"}