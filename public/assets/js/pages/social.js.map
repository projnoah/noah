{"version":3,"sources":["stepsForm.js","social.js"],"names":[],"mappingsfile":"social.js","sourcesContent":["/*\n |------------------------------------------------------------\n | Steps Minimal Form\n |------------------------------------------------------------\n |\n | @project Project Noah\n | @author Cali\n */\n;(function (window) {\n\n    'use strict';\n\n    let transEndEventNames = {\n            'WebkitTransition': 'webkitTransitionEnd',\n            'MozTransition': 'transitionend',\n            'OTransition': 'oTransitionEnd',\n            'msTransition': 'MSTransitionEnd',\n            'transition': 'transitionend'\n        },\n        transEndEventName = transEndEventNames[Modernizr.prefixed('transition')],\n        support = {transitions: Modernizr.csstransitions};\n\n    function extend(a, b) {\n        for (var key in b) {\n            if (b.hasOwnProperty(key)) {\n                a[key] = b[key];\n            }\n        }\n        return a;\n    }\n\n    function stepsForm(el, options) {\n        this.el = el;\n        this.options = extend({}, this.options);\n        extend(this.options, options);\n        this._init();\n    }\n\n    stepsForm.prototype.options = {\n        onSubmit: function () {\n            return false;\n        }\n    };\n\n    stepsForm.prototype._init = function () {\n        // current question\n        this.current = 0;\n\n        // questions\n        this.questions = [].slice.call(this.el.querySelectorAll('ol.questions > li'));\n        // total questions\n        this.questionsCount = this.questions.length;\n        // show first question\n        classie.addClass(this.questions[0], 'current');\n\n        // question control\n        this.ctrlNext = this.el.querySelector('button.next');\n        this.ctrlPrev = this.el.querySelector('button.prev');\n\n        // progress bar\n        this.progress = this.el.querySelector('div.progress');\n\n        // question number status\n        this.questionStatus = this.el.querySelector('span.number');\n        // current question placeholder\n        this.currentNum = this.questionStatus.querySelector('span.number-current');\n        this.currentNum.innerHTML = Number(this.current + 1);\n        // total questions placeholder\n        this.totalQuestionNum = this.questionStatus.querySelector('span.number-total');\n        this.totalQuestionNum.innerHTML = this.questionsCount;\n\n        // error message\n        this.error = this.el.querySelector('span.error-message');\n\n        // init events\n        this._initEvents();\n    };\n\n    stepsForm.prototype._initEvents = function () {\n        var self = this,\n        // first input\n            firstElInput = this.questions[this.current].querySelector('input'),\n        // focus\n            onFocusStartFn = function () {\n                firstElInput.removeEventListener('focus', onFocusStartFn);\n                classie.addClass(self.ctrlNext, 'show');\n            };\n\n        // show the next question control first time the input gets focused\n        firstElInput.addEventListener('focus', onFocusStartFn);\n\n        // show next question\n        this.ctrlNext.addEventListener('click', function (ev) {\n            ev.preventDefault();\n            self._nextQuestion();\n        });\n\n        // show previous question\n        this.ctrlPrev.addEventListener('click', function (ev) {\n            ev.preventDefault();\n            self._nextQuestion(false);\n        });\n\n        // pressing enter will jump to next question\n        document.addEventListener('keydown', function (ev) {\n            const keyCode = ev.keyCode || ev.which;\n            // enter\n            if (keyCode === 13) {\n                ev.preventDefault();\n                self._nextQuestion();\n            }\n        });\n\n        // disable tab\n        this.el.addEventListener('keydown', (ev) => {\n            const keyCode = ev.keyCode || ev.which;\n            // tab\n            if (keyCode === 9) {\n                ev.preventDefault();\n            } else if (keyCode === 27) {\n                ev.preventDefault();\n                if (this.current) this._nextQuestion(false);\n            }\n        });\n    };\n\n    stepsForm.prototype._nextQuestion = function (next = true) {\n        if (next) {\n            if (!this._validate()) return false;\n        }\n\n        // clear any previous error messages\n        this._clearError();\n\n        // current question\n        var currentQuestion = this.questions[this.current];\n\n        // increment current question iterator\n        next ? ++this.current : --this.current;\n\n        // check if form is filled\n        this.isFilled = this.current === this.questionsCount;\n\n        // update progress bar\n        this._progress();\n\n        if (!this.isFilled) {\n            // change the current question number/status\n            this._updateQuestionNumber();\n\n            if (this.current === 0) {\n                classie.removeClass(this.ctrlPrev, 'show');\n            } else {\n                classie.addClass(this.ctrlPrev, 'show');\n            }\n            \n            // add class \"show-next\" to form element (start animations)\n            classie.addClass(this.el, next ? 'show-next' : 'show-prev');\n\n            // remove class \"current\" from current question and add it to the next one\n            // current question\n            var nextQuestion = this.questions[this.current];\n            classie.removeClass(currentQuestion, 'current');\n            classie.addClass(nextQuestion, 'current');\n        }\n\n        // after animation ends, remove class \"show-next\" from form element and change current question placeholder\n        let self = this,\n            onEndTransitionFn = function (ev) {\n                if (support.transitions) {\n                    this.removeEventListener(transEndEventName, onEndTransitionFn);\n                }\n                if (self.isFilled) {\n                    self._submit();\n                } else {\n                    classie.removeClass(self.el, 'show-next');\n                    classie.removeClass(self.el, 'show-prev');\n                    self.currentNum.innerHTML = self.nextQuestionNum.innerHTML;\n                    self.questionStatus.removeChild(self.nextQuestionNum);\n                    // force the focus on the next input\n                    nextQuestion.querySelector('input').focus();\n                }\n            };\n\n        if (support.transitions) {\n            this.progress.addEventListener(transEndEventName, onEndTransitionFn);\n        }\n        else {\n            onEndTransitionFn();\n        }\n    }\n\n    // updates the progress bar by setting its width\n    stepsForm.prototype._progress = function () {\n        this.progress.style.width = this.current * ( 100 / this.questionsCount ) + '%';\n    }\n\n    // changes the current question number\n    stepsForm.prototype._updateQuestionNumber = function () {\n        // first, create next question number placeholder\n        this.nextQuestionNum = document.createElement('span');\n        this.nextQuestionNum.className = 'number-next';\n        this.nextQuestionNum.innerHTML = Number(this.current + 1);\n        // insert it in the DOM\n        this.questionStatus.appendChild(this.nextQuestionNum);\n    }\n\n    // submits the form\n    stepsForm.prototype._submit = function () {\n        this.current--;\n        this.options.onSubmit(this.el);\n        setTimeout(() => this._progress(), 300);\n    }\n\n    // the validation function\n    stepsForm.prototype._validate = function () {\n        // current questionÂ´s input\n        const input = this.questions[this.current].querySelector('input');\n        if (input.value === '') {\n            this._showError('EMPTY');\n            return false;\n        }\n        const reg = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n        if (input.type === 'email' && !reg.test(input.value)) {\n            this._showError('EMAIL');\n            return false;\n        }\n\n        return true;\n    }\n\n    stepsForm.prototype._showError = function (err) {\n        let message = '';\n        switch (err) {\n            case 'EMPTY' :\n                message = data.errors.empty;\n                break;\n            case 'EMAIL' :\n                message = data.errors.email;\n                break;\n        }\n        this.error.innerHTML = message;\n        classie.addClass(this.error, 'show');\n    }\n\n    // clears/hides the current error message\n    stepsForm.prototype._clearError = function () {\n        classie.removeClass(this.error, 'show');\n    }\n\n    // add to global namespace\n    window.stepsForm = stepsForm;\n\n})(window);","/*\n |------------------------------------------------------------\n | Social Connect JavaScript\n |------------------------------------------------------------\n |\n | @project Project Noah\n | @author Cali\n |\n */\n$(function () {\n    const socialForm = document.getElementById('social-form');\n    let loadingMessageEl = socialForm.querySelector('.loading-message');\n    let successMessageEl = socialForm.querySelector('.final-message');\n    let failed = 0;\n\n    // Setup form\n    const setupForm = () => {\n        new stepsForm(socialForm, {\n            onSubmit: (form) => {\n                // Hide form\n                classie.addClass(socialForm.querySelector('.pn-social-form-inner'), 'fade');\n                classie.addClass(loadingMessageEl, 'show');\n\n                loadingMessageEl.innerHTML = `<i class=\"fa fa-square fa-2x\"></i>${data.loading}`;\n                successMessageEl.innerHTML = `<i class=\"fa fa-check-circle\"></i>${data.success}`;\n\n                setTimeout(function () {\n                    classie.addClass(loadingMessageEl.querySelector('i'), 'loading');\n                    submitForm(form);\n                }, 850);\n            }\n        });\n    }\n\n    setupForm();\n\n    // AJAX form submission\n    const submitForm = function (form) {\n        if (failed >= 5) {\n            loadingMessageEl.innerHTML = `<i class=\"fa fa-frown-o\"></i>${data.failed}`;\n            return false;\n        }\n        $.post({\n            url: $(form).attr('action'),\n            data: $(form).serialize(),\n            error: () => {\n                failed++;\n                submitForm(form);\n            },\n            success: (JSON) => {\n                loadingMessageEl.innerHTML = \"\";\n                \n                if (JSON.status == \"succeeded\") {\n                    // Success\n                    classie.addClass(successMessageEl, 'show');\n                    setTimeout(() => window.location.href = JSON.redirect, 1000);\n                } else {\n                    // Something fails\n                    showError(JSON.messages[0]);\n                }\n            }\n        });\n    }\n\n    // Display errors\n    const showError = function (message) {\n        classie.removeClass(loadingMessageEl, 'show');\n        $('.pn-social-form-inner').removeClass('fade');\n\n        const template = `<div id=\"input-errors\"><h3>${message}</h3></div>`;\n\n        $(template).prependTo($('.submission'));\n\n        let errorEl = document.getElementById('input-errors');\n\n        setTimeout( () => {\n            if (errorEl)\n                $(errorEl).fadeOut();\n            setTimeout(() => $(errorEl).remove(), 350);\n        }, 1800);\n    }\n});"],"sourceRoot":"/source/"}